name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - acr
variables:
  - group: variables-acr-prod
  - group: secrets-acr
  - name: DOCKER_BUILDKIT
    value: 1
  - name: tag
    value: '$(Build.BuildId)'
  - name: dockerfilePathBackend
    value: '$(Build.SourcesDirectory)/packages/backend/Dockerfile'
  - name: dockerfilePathFrontend
    value: '$(Build.SourcesDirectory)/Dockerfile.hostbuild'

stages:
  - stage: build_and_test
    displayName: 'Build and Test'
    jobs:
      - job: build_backstage
        displayName: 'Build'
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Bash@3
            displayName: Build backend source (yarn)
            inputs:
              targetType: 'inline'
              script: |
                yarn install --frozen-lockfile
                yarn tsc
                yarn build
          - task: Docker@2
            displayName: Build and push Backend to container registry
            inputs:
              command: buildAndPush
              buildContext: '$(Build.SourcesDirectory)'
              repository: '$(repositoryBackend)'
              dockerfile: $(dockerfilePathBackend)
              containerRegistry: $(acrName)
              tags: |
                $(tag)
                latest
          - task: Docker@2
            displayName: Build and push Frontend to container registry
            inputs:
              command: buildAndPush
              buildContext: '$(Build.SourcesDirectory)'
              repository: '$(repositoryFrontend)'
              dockerfile: $(dockerfilePathFrontend)
              containerRegistry: $(acrName)
              tags: |
                $(tag)
                latest
      - job: Publish_Pattern
        displayName: Publish Pattern
        pool:
          vmImage: windows-latest
        dependsOn: build_backstage
        steps:
          - task: CopyFiles@2
            displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/aci'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/aci'
              CleanTargetFolder: true
              OverWrite: true
