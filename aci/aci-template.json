{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "defaultValue": null,
      "type": "string",
      "minLength": 5,
      "maxLength": 63,
      "metadata": {
        "description": "Unique name for the deployment, used for Hasura and DNS label."
      }
    }
  },
  "variables": {
    "containerGroupName": "[concat(parameters('name'), '-container-group')]",
    "containerName": "hasura-graphql-engine",
    "containerImage": "hasura/graphql-engine:latest",
    "adminSecret": "[parameters('hasuraAdminSecret')]",
    "hasuraPort": 8080,
    "hasuraURL": "[parameters('hasuraConsoleDomain')]"
  },
  "resources": [
    {
      "type": "Microsoft.ContainerInstance/containerGroups",
      "name": "[variables('containerGroupName')]",
      "apiVersion": "2018-10-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "containers": [
          {
            "name": "[variables('containerName')]",
            "properties": {
              "image": "[variables('containerImage')]",
              "ports": [
                {
                  "protocol": "TCP",
                  "port": "[variables('hasuraPort')]"
                }
              ],
              "command": [
                "graphql-engine",
                "--host",
                "[variables('pgHost')]",
                "--port",
                "[variables('pgPort')]",
                "--user",
                "[variables('pgUser')]",
                "--password",
                "[variables('pgPassword')]",
                "--dbname",
                "[variables('dbName')]",
                "serve",
                "--server-port",
                "[variables('hasuraPort')]",
                "--enable-console",
                "--admin-secret",
                "[variables('adminSecret')]"
              ],
              "resources": {
                "requests": {
                  "memoryInGB": 1,
                  "cpu": 1
                }
              }
            }
          },
          {
            "name": "caddy-ssl-server",
            "properties": {
              "image": "caddy:latest",
              "command": [
                "caddy",
                "reverse-proxy",
                "--from",
                "[variables('hasuraURL')]",
                "--to",
                "[concat('localhost:', variables('hasuraPort'))]"
              ],
              "ports": [
                {
                  "protocol": "TCP",
                  "port": 443
                },
                {
                  "protocol": "TCP",
                  "port": 80
                }
              ],
              "environmentVariables": [],
              "resources": {
                "requests": {
                  "memoryInGB": 1,
                  "cpu": 1
                }
              },
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/data"
                },
                {
                  "name": "config",
                  "mountPath": "/config"
                }
              ]
            }
          }
        ],
        "volumes": [
          {
            "name": "data",
            "emptyDir": {}
          },
          {
            "name": "config",
            "emptyDir": {}
          }
        ],
        "restartPolicy": "Always",
        "ipAddress": {
          "ports": [
            {
              "protocol": "TCP",
              "port": 443
            },
            {
              "protocol": "TCP",
              "port": 8080
            },
            {
              "protocol": "TCP",
              "port": 80
            }
          ],
          "type": "Public",
          "dnsNameLabel": "[parameters('name')]"
        },
        "osType": "Linux"
      }
    }
  ],
  "outputs": {
    "fqdn": {
      "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups', variables('containerGroupName'))).ipAddress.fqdn]",
      "type": "string"
    },
    "ipaddress": {
      "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups', variables('containerGroupName'))).ipAddress.ip]",
      "type": "string"
    }
  }
}
